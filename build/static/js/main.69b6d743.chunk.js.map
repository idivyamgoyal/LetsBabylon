{"version":3,"sources":["components/cuboid.js","components/container.js","components/SceneComponent.js","components/keys.js","App.js","reportWebVitals.js","index.js"],"names":["box","map","SceneComponent","props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","rest","onSceneReady","image","useEffect","current","engine","Engine","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","window","addEventListener","dispose","removeEventListener","ref","cuboid","camera","ArcRotateCamera","Math","PI","Vector3","setTarget","Zero","canvas","getRenderingCanvas","attachControl","HemisphericLight","intensity","MeshBuilder","CreateBox","size","material","StandardMaterial","diffuseTexture","Texture","position","y","undefined","deltaTimeInMillis","getDeltaTime","rotation","mapBoxToken","mapboxgl","accessToken","Container","mapFunction","Map","container","mapContainer","style","zoom","state","center","lng","lat","preserveDrawingBuffer","handleClick","document","getElementsByClassName","display","setState","getCanvas","toDataURL","setCity","event","city","target","value","onSubmit","a","preventDefault","axios","get","result","latitude","data","features","longitude","console","log","flyTo","essential","alert","showSelector","hideMap","React","createRef","mapSnap","this","className","href","src","alt","id","onClick","placeholder","onChange","type","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.69b6d743.chunk.js","sourcesContent":["import { Vector3, HemisphericLight, MeshBuilder, StandardMaterial, Texture, ArcRotateCamera } from \"@babylonjs/core\";\n\nlet box;\nconst onSceneReady = (scene, image) => {\n    // This creates and positions a free camera (non-mesh)\n    // var camera = new FreeCamera(\"camera1\", new Vector3(0, 8, -10), scene);\n    const camera = new ArcRotateCamera(\"Camera\", Math.PI / 2, Math.PI / 2, 2, new Vector3(0, 4.5, -15), scene);\n    camera.setTarget(Vector3.Zero());\n    const canvas = scene.getEngine().getRenderingCanvas();\n\n    // This attaches the camera to the canvas\n    camera.attachControl(canvas, true);\n\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    var light = new HemisphericLight(\"light\", new Vector3(0, 0.5, 0.5), scene);\n\n    // Default intensity is 1. Let's dim the light a small amount\n    light.intensity = 10;\n\n    // Our built-in 'box' shape.\n    box = MeshBuilder.CreateBox(\"box\", {\n        size: 4\n    }, scene);\n    var material = new StandardMaterial('material', scene);\n    material.diffuseTexture = new Texture(image, scene);\n\n    box.position.y = 1;\n    // box.position.z = 1;\n\n    box.material = material;\n};\n\n/**\n * Will run on every frame render.  We are spinning the box on y-axis.\n */\nconst onRender = (scene) => {\n    if (box !== undefined) {\n        var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n        const rpm = 5;\n        box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n    }\n};\n\nconst cuboid = {\n    onSceneReady: onSceneReady,\n    onRender: onRender\n};\n\nexport default cuboid;","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport { SceneComponent } from './SceneComponent';\nimport cuboid from './cuboid';\nimport { mapBoxToken} from './keys';\nimport axios from 'axios';\n\nvar map;\nmapboxgl.accessToken = mapBoxToken;\n\nexport default class Container extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // default delhi\n            lat: 28.6139391,\n            lng: 77.2090212,\n            zoom: 9,\n            city: '',\n            image: '',\n        };\n        this.mapContainer = React.createRef();\n        this.mapSnap = React.createRef();\n    }\n\n    mapFunction = () => {\n        map = new mapboxgl.Map({\n            container: this.mapContainer.current,\n            style: \"mapbox://styles/mapbox/outdoors-v11\",\n            zoom: this.state.zoom,\n            center: [this.state.lng, this.state.lat],\n            preserveDrawingBuffer: true\n        });\n        map.resize();\n    }\n\n    componentDidMount() {\n        this.mapFunction();\n    }\n\n    handleClick = () => {\n        document.getElementsByClassName('mapSelector')[0].style.display = 'none';\n        document.getElementsByClassName('mapBtn')[0].style.display = 'block';\n        this.setState({\n            image: map.getCanvas().toDataURL()\n        });\n    };\n\n    setCity = (event) => {\n        this.setState({\n            city: event.target.value\n        });\n    }\n\n    onSubmit = async (event) => {\n        event.preventDefault();\n        try {\n            const result = await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.city}.json?access_token=${mapBoxToken}`);\n            const latitude = result.data.features[0].center[1];\n            const longitude = result.data.features[0].center[0];\n            this.setState({\n                lat: latitude,\n                lng: longitude,\n                city: ''\n            }, () => {\n                console.log(this.state.lat, this.state.lng);\n                map.flyTo({\n                    center: [this.state.lng, this.state.lat],\n                    essential: true\n                });\n            });\n        }\n        catch(err) {\n            console.log(\"Error in location: \" + err);\n            alert(\"Invalid Search!\");\n        }\n    }\n\n    showSelector = () => {\n        document.getElementsByClassName('mapSelector')[0].style.display = 'block';\n        map.resize();\n        document.getElementsByClassName('mapBtn')[0].style.display = 'none';\n    }\n\n    hideMap = () => {\n        document.getElementsByClassName('mapSelector')[0].style.display = 'none';\n        document.getElementsByClassName('mapBtn')[0].style.display = 'block';\n    }\n\n    render() {\n        return (\n            <div className=\"fullBody\">\n                <div className=\"mainDiv\">\n                    <div className=\"header\">\n                        <span className=\"headerText-left\"><a href=\".\">Lets Babylon!</a></span>\n                        <a href=\"https://divyamgoyal.com\"><img src={process.env.PUBLIC_URL + \"/assets/favicons/favicon.ico\"} className=\"headerText-right\" alt=\"DivyamGoyal\" /></a>\n                    </div>\n                    <div className=\"appBody\">\n                        <div ref={this.mapSnap} id=\"screenshotPlaceholder\">\n                            <SceneComponent antialias onSceneReady={cuboid.onSceneReady} onRender={cuboid.onRender} image={this.state.image} id=\"my-canvas\" />\n                            <div className=\"mapSelector\">\n                                <div className=\"searchForm\">\n                                    <div className=\"form-group\">\n                                        <button className=\"btn btn-danger\" onClick={this.handleClick}>\n                                            Take Screenshot\n                                        </button>\n                                    </div>\n                                    <form className=\"form-inline\" onSubmit={this.onSubmit}>\n                                        <div className=\"form-group mx-sm-3 mb-2\">\n                                            <input className=\"form-control\" placeholder=\"Enter the City Name\" onChange={this.setCity} value={this.state.city} />\n                                        </div>\n                                        <input className=\"btn btn-success mb-2\" type=\"submit\" value=\"Search\" />\n                                    </form>\n                                </div>\n                                <div ref={this.mapContainer} className=\"map-container\" />\n                                <div className=\"closeMap\">\n                                    <button className=\"btn btn-warning circleBtn\" onClick={this.hideMap}>X</button>\n                                </div>\n                            </div>\n                            <div className=\"mapBtn\">\n                                <button className=\"btn btn-light\" onClick={this.showSelector}>Map</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"myFooter\">\n                    <div className=\"container\">\n                        <a href=\"https://divyamgoyal.com\"><img src={process.env.PUBLIC_URL + \"/assets/favicons/favicon-32x32.png\"} className=\"headerText-right\" alt=\"DivyamGoyal\" /></a>\n                        <div>\n                            Developed by <a href=\"https://divyamgoyal.com\">Divyam Goyal</a>.\n                        </div>\n                        <div>\n                            <a href=\"https://github.com/idivyamgoyal\">Github</a> | <a href=\"https://linkedin.com/in/idivyamgoyal\">LinkedIn</a> | <a href=\"mailto:divyamgoyal9930@gmail.com\">Mail</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import { Engine, Scene } from \"@babylonjs/core\";\nimport React, { useEffect, useRef } from \"react\";\n\nexport const SceneComponent = (props) => {\n  const reactCanvas = useRef(null);\n  const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, image, ...rest } = props;\n\n  useEffect(() => {\n    if (reactCanvas.current) {\n      const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\n      const scene = new Scene(engine, sceneOptions);\n      if (scene.isReady()) {\n        props.onSceneReady(scene, props.image);\n      } else {\n        scene.onReadyObservable.addOnce((scene) => props.onSceneReady(scene, props.image));\n      }\n\n      engine.runRenderLoop(() => {\n        if (typeof onRender === \"function\") {\n          onRender(scene);\n        }\n        scene.render();\n      });\n\n      const resize = () => {\n        scene.getEngine().resize();\n      };\n\n      if (window) {\n        window.addEventListener(\"resize\", resize);\n      }\n\n      return () => {\n        scene.getEngine().dispose();\n\n        if (window) {\n          window.removeEventListener(\"resize\", resize);\n        }\n      };\n    }\n  });\n\n  return <canvas ref={reactCanvas} {...rest} />;\n};\n\n// export default SceneComponent;","export const mapBoxToken = \"pk.eyJ1IjoiZGl2eWFtZ295YWwiLCJhIjoiY2txZTR3cXp0MDRkMzJ2cXUwdmlzdnJhMCJ9.7MzxywKX2eOK3Ewk1PEj_Q\";","import './App.css';\nimport Container from './components/container';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n      <Container />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}